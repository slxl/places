# Please try to keep rules sorted alphabetically
# so it would be easy to search

# rules directory
# https://realm.github.io/SwiftLint/rule-directory.html
# explanation
# https://danger.systems/swift/tutorials/ios_app.html#swiftlint-for-the-greater-good
# https://github.com/realm/SwiftLint/
# examples:
# https://github.com/danger/swift/blob/master/.swiftlint.yml

allow_zero_lintable_files: true

# By default, SwiftLint uses a set of sensible default rules you can adjust:
disabled_rules: # rule identifiers turned on by default to exclude from running
    - cyclomatic_complexity # need to re-enable, but can't fix now
    - trailing_whitespace # need to re-enable, but whole project needs to be reformatted
    - no_grouping_extension # grouping in one file is better than no grouping at all. splitting into several files is questionable.
    - inclusive_language # we love all the races, genders and ppl around the world, but this is too much
    - file_types_order # there is no documentation on this rule and in some cases it works very strange. Bogo sorting types in file to guess the right order takes too much efforts for such a questionable outcome.

opt_in_rules: # some rules are only opt-in
  - anonymous_argument_in_multiline_closure # Use named arguments in multiline closures
  - array_init # Prefer using Array(seq) than seq.map { $0 } to convert a sequence into an Array.
  - attributes # Attributes should be on their own lines in functions and types, but on the same line as variables and imports.
  - closure_body_length # Closure bodies should not span too many lines
  - closure_end_indentation # Closure end should have the same indentation as the line that started it.
  - closure_spacing # Closure expressions should have a single space inside each brace.
  - collection_alignment # All elements in a collection literal should be vertically aligned
  - comma_inheritance # Use commas to separate types in inheritance lists
  - conditional_returns_on_newline # Conditional statements should always return on the next line
  - contains_over_first_not_nil # Prefer contains over first(where:) != nil
  - contains_over_filter_is_empty # Prefer contains over using filter(where:).isEmpty
  - contains_over_range_nil_comparison # Prefer contains over range(of:) != nil and range(of:) == nil
  - contains_over_filter_count # Prefer contains over comparing filter(where:).count to 0
  - convenience_type # Types used for hosting only static members should be implemented as a caseless enum to avoid instantiation
  - direct_return # Directly return the expression instead of assigning it to a variable first
  - discarded_notification_center_observer # When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later
  - discouraged_assert # Prefer assertionFailure() and/or preconditionFailure() over assert(false)
  - discouraged_none_name # Enum cases and static members named none are discouraged as they can conflict with Optional<T>.none
  - discouraged_object_literal # Prefer initializers over object literals
  # - discouraged_optional_boolean # Prefer non-optional booleans over optional booleans
  # - discouraged_optional_collection # Prefer empty collection over optional collection
  - empty_collection_literal # Prefer checking isEmpty over comparing collection to an empty array or dictionary literal
  - empty_count # Prefer checking isEmpty over comparing count to zero.
  - empty_string # Prefer checking isEmpty over comparing string to an empty string literal
  - empty_xctest_method # Empty XCTest method should be avoided
  - enum_case_associated_values_count # The number of associated values in an enum case should be low.
  - explicit_init # Explicitly calling .init() should be avoided.
  - explicit_top_level_acl # Top-level declarations should specify Access Control Level keywords explicitly.
  # too many warnings for now. review
  # - explicit_acl # All declarations should specify Access Control Level keywords explicitly
  - fallthrough # Fallthrough should be avoided
  - fatal_error_message # A fatalError call should have a message.
  - file_header # Header comments should be consistent with project patterns. The SWIFTLINT_CURRENT_FILENAME placeholder can optionally be used in the required and forbidden patterns. It will be replaced by the real file name.
  - file_name_no_space # File name should not contain any whitespace
  - file_types_order # Specifies how the types within a file should be ordered.
  - first_where # Prefer using .first(where:) over .filter { }.first in collections.
  - flatmap_over_map_reduce # Prefer flatMap over map followed by reduce([], +)
  - force_unwrapping # Force unwrapping should be avoided.
  - ibinspectable_in_extension # Extensions shouldn’t add @IBInspectable properties
  - identical_operands # Comparing two identical operands is likely a mistake
  - implicit_return # Prefer implicit returns in closures.
  - implicitly_unwrapped_optional # Implicitly unwrapped optionals should be avoided when possible.
  # too many warnings for now. review
  # - indentation_width # Indent code using either one tab or the configured amount of spaces, unindent to match previous indentations. Don’t indent the first line.
  - joined_default_parameter # Discouraged explicit usage of the default separator.
  - last_where # Prefer using .last(where:) over .filter { }.last in collections
  - legacy_multiple # Prefer using the isMultiple(of:) function instead of using the remainder operator (%)
  - legacy_objc_type # Prefer Swift value types to bridged Objective-C reference types
  - let_var_whitespace # Let and var should be separated from other statements by a blank line.
  - literal_expression_end_indentation # Array and dictionary literal end should have the same indentation as the line that started it.
  - local_doc_comment # Prefer regular comments over doc comments in local scopes
  - lower_acl_than_parent # Ensure declarations have a lower access control level than their enclosing parent
  - modifier_order # Modifier order should be consistent.
  - multiline_arguments # Arguments should be either on the same line, or one per line.
  - multiline_arguments_brackets # Multiline arguments should have their surrounding brackets in a new line
  - multiline_function_chains # Chained function calls should be either on the same line, or one per line
  - multiline_literal_brackets # Multiline literals should have their surrounding brackets in a new line
  - multiline_parameters # Functions and methods parameters should be either on the same line, or one per line.
  - multiline_parameters_brackets # Multiline parameters should have their surrounding brackets in a new line
  - nimble_operator # Prefer Nimble operator overloads over free matcher functions.
  - no_grouping_extension # Extensions shouldn't be used to group code within the same source file.
  - nslocalizedstring_require_bundle # Calls to NSLocalizedString should specify the bundle which contains the strings file
  - number_separator # Underscores should be used as thousand separator in large decimal numbers.
  - object_literal # Prefer object literals over image and color inits.
  - operator_usage_whitespace # Operators should be surrounded by a single whitespace when they are being used.
  - optional_enum_case_matching # Matching an enum case against an optional enum without ‘?’ is supported on Swift 5.1 and above
  - overridden_super_call # Some overridden methods should always call super
  - override_in_extension # Extensions shouldn't override declarations.
  - pattern_matching_keywords # Combine multiple pattern matching bindings by moving keywords out of tuples.
  - period_spacing # Periods should not be followed by more than one space
  - prefer_nimble # Prefer Nimble matchers over XCTAssert functions
  - prefer_self_in_static_references # Use Self to refer to the surrounding type name
  - prefer_self_type_over_type_of_self # Prefer Self over type(of: self) when accessing properties or calling methods
  - prefer_zero_over_explicit_init # Prefer .zero over explicit init with zero parameters (e.g. CGPoint(x: 0, y: 0))
  - prefixed_toplevel_constant # Top-level constants should be prefixed by k
  - private_swiftui_state # SwiftUI state properties should be private
  - prohibited_super_call # Some methods should not call super
  - quick_discouraged_call # Discouraged call inside 'describe' and/or 'context' block.
  - quick_discouraged_focused_test # Discouraged focused test. Other tests won't run while this one is focused.
  - quick_discouraged_pending_test # Discouraged pending test. This test won't run while it's marked as pending.
  - raw_value_for_camel_cased_codable_enum # Camel cased cases of Codable String enums should have raw values
  - reduce_into # Prefer reduce(into:_:) over reduce(_:_:) for copy-on-write types
  - redundant_nil_coalescing # nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
  - redundant_self_in_closure # Explicit use of ‘self’ is not required
  - redundant_type_annotation # Variables should not have redundant type annotation
  - required_enum_case # Enums conforming to a specified protocol must implement a specific case(s).
  - return_value_from_void_function # Returning values from Void functions should be avoided
  - single_test_class # Test files should contain a single QuickSpec or XCTestCase class.
  - self_binding # Re-bind self to a consistent identifier name.
  - shorthand_optional_binding # Use shorthand syntax for optional binding
  - sorted_enum_cases # Enum cases should be sorted
  - sorted_first_last # Prefer using min() or max() over sorted().first or sorted().last
  - sorted_imports # Imports should be sorted.
  - static_operator # Operators should be declared as static functions, not free functions
  - strict_fileprivate # fileprivate should be avoided.
  - superfluous_else # Else branches should be avoided when the previous if-block exits the current scope
  - switch_case_on_newline # Cases inside a switch should always be on a newline
  - test_case_accessibility # Test cases should only contain private non-test members
  - trailing_closure # Trailing closure syntax should be used whenever possible.
  - toggle_bool # Prefer someBool.toggle() over someBool = !someBool
  - type_contents_order # Specifies the order of subtypes, properties, methods & more within a type.
  - unavailable_function # Unimplemented functions should be marked as unavailable
  - unhandled_throwing_task # Errors thrown inside this task are not handled, which may be unexpected. Handle errors inside the task, or use try await to access the Tasks value and handle errors. See this forum thread for more details: https://forums.swift.org/t/task-initializer-with-throwing-closure-swallows-error/56066
  - unneeded_parentheses_in_closure_argument # Parentheses are not needed when declaring closure arguments.
  - unowned_variable_capture # Prefer capturing references as weak to avoid potential crashes
  - untyped_error_in_catch # Catch statements should not declare error variables without type casting
  - vertical_parameter_alignment_on_call # Function parameters should be aligned vertically if they're in multiple lines in a method call.
  - vertical_whitespace_between_cases # Include a single empty line between switch cases
  - vertical_whitespace_closing_braces # Don’t include vertical whitespace (empty line) before closing braces
  - vertical_whitespace_opening_braces # Don’t include vertical whitespace (empty line) after opening braces
  - yoda_condition # The constant literal should be placed on the right-hand side of the comparison operator
  - weak_delegate # Delegates should be weak to avoid reference cycles
  - xct_specific_matcher # Prefer specific XCTest matchers over XCTAssertEqual and XCTAssertNotEqual.

# ------------------
# Configurable rules
# ------------------
# To disable warnings in cases where just a single trailing closure among multiple optionals is used.
# In this case parameter name matters and can't be omitted.
trailing_closure:
  only_single_muted_parameter: true

# Closure bodies should not span too many lines.
closure_body_length:
  warning: 80
  error: 100

file_length:
  warning: 600 # needs discussion (default: 400)
  error: 1000 # needs discussion (default: 1000)

function_body_length:
  warning: 200 # needs discussion (default: 50)
  error: 250 # needs discussion (default: 100)

identifier_name:
  allowed_symbols: "_"
  min_length: # only min_length
    error: 2 # only error
  excluded: # excluded via string array
    - vc
    - no
    - on
    - to
    - id
    - DS
    - URL
    - GlobalAPIKey

line_length:
  warning: 200 # needs discussion (default: 120)
  error: 350 # needs discussion (default: 200)
  ignores_comments: true
  ignores_urls: true
  ignores_function_declarations: true
  ignores_interpolated_strings: true

nesting:
  type_level: 3

number_separator:
  minimum_length: 6

type_name:
  allowed_symbols: "_"
  max_length:
    warning: 60
    error: 100
  excluded: # excluded via string array
    - UI
    - M
    
custom_rules:
  disable_print:
    included: ".*\\.swift"
    name: "print usage"
    regex: "((\\bprint)|(Swift\\.print))\\s*\\("
    message: "In production you should use logs. Debug prints should be removed."
    severity: error
  legacy_previews:
    included: ".*\\.swift"
    name: "Legacy previews usage"
    regex: "^.*PreviewProvider.*$"
    message: "Use the modern #Preview { ... } syntax"
    severity: error
#  previews_environment:
#    included: ".*\\.swift"
#    name: "Previews environment"
#    regex: "(?:(?!\\#if ALPHA(?:.*\\n)*?\\n\\#endif).)*\\#Preview(?![\\s\\S]*?\\n\\#endif)"
#    message: "Previews should only be covered with #if ALPHA or #if DEBUG"
#    severity: error

reporter: "xcode"
